image: node

stages:
  - build
  - test
  - deploy review
  - release
  - deploy staging
  - deploy production
  - production tests

#Caching up node_modules to increase pipeline efficiency 
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

#Environment Variables
variables:
  PROJECT_NAME: deadpool
  STAGING_DOMAIN: deadpool-in-staging.surge.sh
  PRODUCTION_DOMAIN: deadpool-in-production.surge.sh

#The deployment jobs automatically pick up SURGE_LOGIN & SURGE_TOKEN CI/CD variables from the environment.
#Ensure the variables are configured for the project.

#Job for Artifact creation with dynamic versioning
build website:
  stage: build
  only:
    - master
    - merge_requests
  script:
    - echo $CI_COMMIT_SHORT_SHA
    - npm install
    - npm install -g gatsby-cli
    - gatsby build
    - sed -i "s/%%VERSION%%/$CI_COMMIT_SHORT_SHA/" ./public/index.html
  artifacts:
    paths:
      - ./public

#Job for testing the artifact
test artifact:
  image: alpine
  stage: test
  only:
    - master
    - merge_requests
  script:
    - grep -q "Gatsby" ./public/index.html

#Job for testing the hosting process
test website:
  stage: test
  only:
    - master
    - merge_requests
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby serve &
    - sleep 3
    - curl "http://localhost:9000" | tac | tac | grep -q "Gatsby"

#Job for creating a review deployment for merge request
deploy review:
  stage: deploy review
  only:
    - merge_requests
  environment:
      name: review/$CI_COMMIT_REF_NAME
      url: https://deadpool-in-$CI_ENVIRONMENT_SLUG.surge.sh
      on_stop: stop review
  script:
    - npm install --global surge
    - surge --project ./public --domain deadpool-in-$CI_ENVIRONMENT_SLUG.surge.sh

#Job for cleaning up the review deployment
stop review:
  stage: deploy review
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - npm install --global surge
    - surge teardown deadpool-in-$CI_ENVIRONMENT_SLUG.surge.sh
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop

#This job builds and pushes the image to the container registry. It uses two additional environment variables. 
pushing image:
  image: docker
  stage: release
  only:
    - master
  script:
#    - docker login registry.gitlab.com -u ${GITLAB_USERNAME} -p ${GITLAB_TOKEN} $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/${GITLAB_USERNAME}/${PROJECT_NAME}/${CI_COMMIT_SHORT_SHA} .
    - docker push registry.gitlab.com/${GITLAB_USERNAME}/${PROJECT_NAME}/${CI_COMMIT_SHORT_SHA}
  allow_failure: false

#Pre-production stage
deploy staging: 
  stage: deploy staging
  environment:
    name: staging
    url: http://$STAGING_DOMAIN
  only:
    - master
  before_script:
    - npm install --global surge  
  script:
    - surge --project ./public --domain $STAGING_DOMAIN

#Job for production deployments
deploy production: 
  stage: deploy production
  environment:
    name: production
    url: $PRODUCTION_DOMAIN
  only:
    - master
  before_script:
    - npm install --global surge    
  script:
    - surge --project ./public --domain $PRODUCTION_DOMAIN

#Job for post release testing
production tests:
  image: alpine
  stage: production tests
  only:
    - master  
  script:
    - apk add --no-cache curl
    - curl -s "https://$PRODUCTION_DOMAIN" | grep -q "Hi people"
    - curl -s "https://$PRODUCTION_DOMAIN" | grep -q "$CI_COMMIT_SHORT_SHA"